---
title: "Behavior of N Schools Problem with Pathfinder"
format:
    html:
        page-layout: full
---

```{css, echo = FALSE}
.output {
max-height: 500px;
overflow-y: scroll;
}

.cell-output-stdout {
  overflow-y: scroll;
  max-height: 500px;
}

```



## Introduction

During our investigation of using Pathfinder to fit hierarchical models, we found that pathfinder produced duplicated rows in the sample. This document reproduces the problem and shows that as the dimension of the parameter space increases, there are fewer and fewer distinct rows generated by the sample. We use the 8-Schools model to demonstrate the row duplication in the simple case. We then generate new data to extend the problem to $N$ schools to show that the number of number of distinct rows decreases as the dimension increases. We make no claims to the cause of this at the moment.

## Pathfinder with the (non-centered) 8 Schools Model

We first investigate the behavior of the 8-Schools.

```{r}
#| echo: true
#| message: false
#| warning: false

library(cmdstanr)
library(jsonlite)
library(tidyverse)
library(glue)
```

We use the following data:

```{r}
#| echo: true
#| message: false

#read in data
stan_data <- read_json( "eight_schools.json", simplifyVector=T)
print(stan_data)
```

And use the stan script below to run our model.

```{r}
#| class-output: stan
#| echo: false
cat(readLines("eight_schools_noncentered.stan"), sep = "\n")
```


Next, we run the 8-Schools model and extract draws to observe the number of distinct rows in the sample.


```{r}
#| echo: true
#| warning: false

#### Run eight schools non-centered version
mod_eight    <- cmdstanr::cmdstan_model( "eight_schools_noncentered.stan",
                                        cpp_options=list(stan_threads=TRUE)) 

fit_eight <- mod_eight$pathfinder( data = stan_data,
                       refresh = 8,
                       draws=2000,
                       num_threads = 8,
                       num_paths = 20,
                       psis_resample = T 
                       )


```

After running pathfinder, we check the number of distinct draws in the output

```{r}
#| echo: true
#| warning: false

eight_df <- fit_eight$draws(format="df")

#get number of distinct rows from output
d_rows <- eight_df %>% select(-.chain, -.iteration, -.draw) %>% distinct() %>% nrow()

#get total number of rows
rows <- nrow(eight_df)

```

We note that there were `r d_rows` distinct rows out of `r rows` total rows.


## Generating "New Schools"

After reviewing the 8-Schools model, we wanted to investigate how increasing the number of schools affected the number of distinct draws from pathfinder. We did so by modeling the original 8-schools data set. In our model, we parameterize the variance along with the mean. Our goal is to then generate N schools and model them via Pathfinder.

We use the following stan script:

```{r}
#| class-output: stan
#| echo: false
cat(readLines("eight_schools_noncentered_gvf.stan"), sep = "\n")
```

Next we run the model using HMC to get the parameter estimates we will use later to generate new data.

```{r}
#| echo: true
#| warning: false

#### Run eight schools non-centered version
suppressWarnings(mod1     <- cmdstanr::cmdstan_model( "eight_schools_noncentered_gvf.stan",
                                                    cpp_options=list(stan_threads=TRUE) ) )

#Fit our new model to 8-schools with HMC 
fit_samp = mod1$sample( data = stan_data, 
                         chains=3, 
                         threads_per_chain=1,
                         refresh=300,
                         adapt_delta = .99 )

```
Finally, we obtain the following parameter estimates that will be used in the next section

```{r}
mydraws <- fit_samp$draws(format="df")

library(invgamma)

mu_bar <- mydraws$mu   %>% mean()
tausq_bar <- mydraws$tau_sq %>% mean()
phi_bar <- mydraws$phi %>% mean()


cat("****Parameters Estimated From Model****","\n",
    "mu_bar:",mu_bar,"\n",
    "tausq_bar:", tausq_bar,"\n",
    "phi_bar:", phi_bar)
```

## Fitting N Schools

### Our Procedure

We will run the N school problem from 8 to 150 schools by 2, 10 times each using the parameters we found from HMC. For each simulation, we generate new data as shown below.

```{r}
#| eval: false
#| echo: true

N <- x
sigma <- rinvgamma(N, 2, scale = phi_bar) 
theta <- rnorm(N, mu_bar, tausq_bar )
y     <- rnorm(theta,phi_bar)

```

We then run pathfinder using the call below.

```{r}
#| eval: false
#| echo: true


#run pathfinder
fit_pf = mod_eight$pathfinder( data =  temp[[k]][['stan_data_gen']],
                   draws=3000,
                   num_threads = 12,
                   num_paths = 20,
                   psis_resample = T)  
        
```

After each iteration of the loop, we store the model fit and the draws. We will perform analysis on this afterwards.

### Main Loop

We perform the steps noted in the previous section in the main loop below. 


We run the model for 8 to 150 schools by 2, 10 times each. 

```{r}
#| echo: true
#| warning: false

library(parallel)


#status file just helps us keep track of progress
file.remove("status.txt")
#N_tot is a sequence of number of schools 
#we will generate
N_tot <- seq(from=8, to=150, by=2)

#for each number of 
n_times <- 10


#function I will use in an lapply
myloop <- function(x){
    
    #store the n_times simulations
    temp <- list()
    
    #begin simulating n_times
    for(k in 1:n_times){
        
        #this is simply here for me to keep track of the simulation
        write_lines( x = paste0("Number of Schools: ",x," Simulation Number: ", k),
                    file= "status.txt",
                    append=T )
        
        #create a holder for this 
        #simulations results
        temp[[k]] <- list()       
        
        #Generate New Data
        N <- x
        sigma <- rinvgamma(N, 2, scale = phi_bar) 
        theta <- rnorm(N, mu_bar, tausq_bar )
        y     <- rnorm(theta,phi_bar)

        #store the data we will use
        temp[[k]][['stan_data_gen']] <- list(J=N,y=y,sigma=sigma)
        
        #run pathfinder
        fit_pf = mod_eight$pathfinder( data =  temp[[k]][['stan_data_gen']],
                           draws=3000,
                           refresh=0,
                           num_threads = 4,
                           num_paths = 20,
                           psis_resample = T)  
        
        #store the model
        temp[[k]][['model']] <- fit_pf
        temp[[k]][['draws']] <- fit_pf$draws(format="df")
    }
    
    return( temp )
}

#run simulation
#results <- lapply(N_tot,myloop)  #I use this on Windows
results <- mclapply(N_tot,myloop,mc.preschedule=F,mc.cores=40)

```

After running the simulation, we extract the number of schools in each simulation along with the number of unique draws from the simulation.


```{r}
#| echo: true
#| warning: false

 #number of schools in each simulation
 nschools  <- results %>% map( ~map_int( .x, ~pluck(.x,"stan_data_gen","J") )) %>% list_c()

 #return number of unique
 getdistinctdraws <- . %>% 
                      select(-.chain, -.iteration, -.draw) %>% 
                      distinct() %>% 
                      nrow()
 
 #get number of distinct samples in each simulation
 uniquedraws <- results %>% 
             map( ~map_int( .x, ~( pluck(.x,"draws") %>% getdistinctdraws) )) %>% 
             list_c()

 df_summary <- tibble(nschools = as.factor(nschools), 
                      n_unique_draws = uniquedraws)
```

Finally we plot a violin plot of the number of unique rows.

```{r}
#| echo: true

df_summary %>% ggplot(aes(x=nschools,y=n_unique_draws)) + geom_boxplot() + geom_point(size=2) +
  labs(title="Number of Unique Rows Out of 3000 Draws by Number of Schools in Simulation", y = "Number of Unique Draws", x="Number of Schools in Simulation") + theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1,size=10))

```

```{r}
#| include: false

#This is just here to automate the dump of the code to an R script
knitr::purl('n_schools_pf.qmd')
```

